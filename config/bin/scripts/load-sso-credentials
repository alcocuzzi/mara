#!/usr/bin/env python3
"""
Mara utility to load short-term AWS SSO credentials.

Usage:
  load-sso-credentials [options]

Options:
  -r, --region=region     Gives the ability to set a default region 
                          for the credentials profile [default: us-west-2]
  -h, --help              Show this help message and exit
  --debug                 Show more verbose logging
"""


## Library to parse credentials content to the files
import configparser
# Library to exit when facing errors
from sys import exit
# Library to set log levels
from logging import basicConfig, getLogger, INFO, WARNING
from rich.console import Console
from rich.logging import RichHandler
# Library to have command line options
import docopt
from boto3 import client
from botocore.exceptions import ClientError
from subprocess import run, CalledProcessError
from os import environ


# Logging configuration
FORMAT = "%(message)s"
basicConfig(
    format=FORMAT, datefmt="[%X]", handlers=[RichHandler()], level=INFO,
)
_log = getLogger("rich")
console = Console()

# Suppress boto3/botocore logging to avoid message `Found credentials in shared credentials file: ~/.aws/credentials`
getLogger('boto3').setLevel(WARNING)
getLogger('botocore').setLevel(WARNING)


# Load credentials function
def load_credentials():
   print("╔═════════════════════════════════════════════════════════════════════════════════════════════════════╗")
   print("║     ↓ ↓     Please paste the AWS SSO credentials below and press Enter twice to save:     ↓ ↓       ║")
   print("╚═════════════════════════════════════════════════════════════════════════════════════════════════════╝\n")
   credentials = {}
   while True:
      line = input()
      if not line:
         break
      line = line.strip()

      if line.startswith("export"):
         line = line.replace('export', '').replace('"', '')
         key, value = line.split("=", 1)
         credentials[key.strip()] = value.strip()
      elif line.startswith("SET"):
         line = line.replace('SET', '').replace('"', '')
         key, value = line.split("=", 1)
         credentials[key.strip()] = value.strip()
      elif line.startswith("$Env:"):
         line = line.replace('$Env:', '').replace('"', '')
         key, value = line.split("=", 1)
         credentials[key.strip()] = value.strip()
      elif line.startswith("AWS"):
         key, value = line.split("=", 1)
         credentials[key.strip()] = value.strip()
      else:
         _log.warning("Whoops! Looks like the AWS SSO credentials were pasted in wrong format. Please try again by copying and pasting them as from SSO console snippet.")
         exit(0)

   if credentials:
      aws_access_key_id = credentials.get("AWS_ACCESS_KEY_ID")
      _log.info("AWS_ACCESS_KEY_ID: %s", aws_access_key_id[:20])
      aws_secret_access_key = credentials.get("AWS_SECRET_ACCESS_KEY")
      _log.info("AWS_SECRET_ACCESS_KEY: %s", aws_secret_access_key[:20])
      aws_session_token = credentials.get("AWS_SESSION_TOKEN")
      _log.info("AWS_SESSION_TOKEN: %s", aws_session_token[:20])
      
      store_credentials(aws_access_key_id, aws_secret_access_key, aws_session_token)

# Parse credentials function
def store_credentials(access_key_id, secret_access_key, session_token):
# Set the credentials
   home_dir = environ['HOME']
   config = configparser.ConfigParser()
   config.read(f"{home_dir}/.aws/credentials")
   if not config.has_section("default"):
      config.add_section("default")
   config.set("default", "aws_access_key_id", access_key_id)
   config.set("default", "aws_secret_access_key", secret_access_key)
   config.set("default", "aws_session_token", session_token)
   with open(f"{home_dir}/.aws/credentials", "w") as credentials_file:
      config.write(credentials_file)

# Set the region
   config_region = configparser.ConfigParser()
   config_region.read(f"{home_dir}/.aws/config")
   if not config_region.has_section("default"):
      config_region.add_section("default")
   config_region.set("default", "region", options["--region"])
   _log.info("AWS_REGION: %s", options["--region"])
   config_region.set("default", "output", "json")
   with open(f"{home_dir}/.aws/config", "w") as config_region_file:
      config_region.write(config_region_file)

   try:
      account_info = client('sts').get_caller_identity()
      identity = account_info['Arn'].split('/')[-1]
      acc_number = account_info["Account"]
  
      try:
         acc_alias = client('iam').list_account_aliases()['AccountAliases'][0]
      
      except IndexError:
         acc_alias = ""
         _log.info("This account does not have an alias. Let's use the account number instead")

   except ClientError as e:
      _log.error(e)
      exit(1)
  
   try:
      remove_acc_number = run("printenv | grep 'mara_acc_number'", shell=True, executable="/usr/bin/fish", check=True, capture_output=True).stdout.strip()

      if remove_acc_number:
         run("set -e mara_acc_number", shell=True, executable="/usr/bin/fish", check=True)

   except CalledProcessError:
      pass
   
   try:
      remove_acc_alias = run("printenv | grep 'mara_acc_alias'", shell=True, executable="/usr/bin/fish", check=True, capture_output=True).stdout.strip()
      
      if remove_acc_alias:
         run("set -e mara_acc_alias", shell=True, executable="/usr/bin/fish", check=True)
   
   except CalledProcessError:
      pass

### Setting current account information in the prompt  
   run("set -Ux mara_region " + options["--region"], shell=True, executable="/usr/bin/fish", check=True)
   run("set -Ux mara_identity " + identity, shell=True, executable="/usr/bin/fish", check=True)   
   if acc_alias:
      run("set -Ux mara_acc_alias " + acc_alias, shell=True, executable="/usr/bin/fish", check=True)
  
   else:  
      run("set -Ux mara_acc_number " + acc_number, shell=True, executable="/usr/bin/fish", check=True)
   
    
# Main function
def main(options):
   if options["--debug"]:
      for key, value in options.items():
         _log.debug("command-line options: {}: {}".format(key, value))

   load_credentials()

if __name__ == "__main__":
   try:
      options = docopt.docopt(__doc__)
      main(options)

   except docopt.DocoptExit:
      exit(__doc__)