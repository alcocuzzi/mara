#!/usr/bin/env python3
"""
Mara utility to help you find the available Mara commands.

Usage:
   help [options]

Options:
   -h, --help              Show this help message and exit
   --debug                 Show more verbose logging
"""

import sys
import subprocess
from logging import basicConfig, getLogger, INFO, DEBUG
from rich.console import Console
from rich.logging import RichHandler
import docopt

# Logging configuration
FORMAT = "%(message)s"
basicConfig(
    format=FORMAT,
    datefmt="[%X]",
    handlers=[RichHandler()],
    level=INFO,
)
_log = getLogger("rich")
console = Console()

# ANSI 24-bit color codes
HEADER_COLOR = "\033[38;2;96;125;59m"     # #607D3B
COMMAND_COLOR = "\033[38;2;185;192;188m"  # #B9C0BC

def show_available_commands():
    try:
        available_commands = subprocess.run(['ls', '/app/scripts/'], capture_output=True, text=True, check=True)
    except subprocess.CalledProcessError as e:
        _log.error("Failed to list available commands: %s", e)
        sys.exit(1)

    print(f"{HEADER_COLOR}╭─────────────────────────────────────────────────╮")
    print(f"{HEADER_COLOR}│    ↓ ↓     Available Mara Commands     ↓ ↓      │")
    print(f"{HEADER_COLOR}╰─────────────────────────────────────────────────╯\n")

    for i, command in enumerate(available_commands.stdout.splitlines(), 1):
        print(f"{COMMAND_COLOR}{i} ❯ {command}")

def main(options):
    if options["--debug"]:
        _log.setLevel(DEBUG)
        _log.debug("Debug mode enabled.")
        for key, value in options.items():
            _log.debug(f"{key}: {value}")

    if len(sys.argv) == 1:
        show_available_commands()

if __name__ == "__main__":
    try:
        options = docopt.docopt(__doc__)
        main(options)
    except docopt.DocoptExit:
        show_available_commands()
