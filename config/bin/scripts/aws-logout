#!/usr/bin/env python3
"""
Mara utility to logout AWS active session.

Usage:
   logout [options]

Options:
  -h, --help              Show this help message and exit
  --debug                 Show more verbose logging
"""

# Library to exit when facing errors
from sys import exit
# Library to set log levels
from logging import basicConfig, getLogger, INFO, WARNING
from rich.console import Console
from rich.logging import RichHandler
# Library to have command line options
import docopt
from subprocess import run, check_output, CalledProcessError, DEVNULL
from os import environ

# Logging configuration
FORMAT = "%(message)s"
basicConfig(
    format=FORMAT, datefmt="[%X]", handlers=[RichHandler()], level=INFO,
)
_log = getLogger("rich")
console = Console()

# Suppress boto3/botocore logging to avoid message `Found credentials in shared credentials file: ~/.aws/credentials`
getLogger('boto3').setLevel(WARNING)
getLogger('botocore').setLevel(WARNING)


def logout():
  home_dir = environ['HOME']
  try:
    with open(f"{home_dir}/.aws/credentials") as creds_file:
      if "aws_access_key_id" in creds_file.read():    
        open(f"{home_dir}/.aws/credentials", 'w').close()
        open(f"{home_dir}/.aws/config", 'w').close()

        variables_to_remove = ['mara_acc_number', 'mara_acc_alias', 'mara_identity', 'mara_region']
  
        for variable in variables_to_remove:
          try:
            env_variable = run(f"printenv | grep '{variable}'", shell=True, executable="/usr/bin/fish", check=True, capture_output=True).stdout.strip()
    
            if env_variable:
              run(f"set -e {variable}", shell=True, executable="/usr/bin/fish", check=True)
      
          except CalledProcessError:
            pass
      
      else:
        _log.error("This command requires you to login on AWS first")
        exit(0)
    
  except IOError:
    _log.error("This command requires you to login on AWS first")
    exit(0)


# Main function
def main(options):
   if options["--debug"]:
      for key, value in options.items():
         _log.debug("command-line options: {}: {}".format(key, value))

   logout()
    
if __name__ == "__main__":
   try:
      options = docopt.docopt(__doc__)
      main(options)

   except docopt.DocoptExit:
      exit(__doc__)