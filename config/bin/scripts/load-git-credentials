#!/usr/bin/env python3
"""
Mara utility to load Git access token from SSM Parameter store. 
Please make sure to save your access token on SSM Parameter store before using this utility.

Usage:
   load-git-credentials [options]

Options:
   -h, --help              Show this help message and exit
   --debug                 Show more verbose logging
"""

from boto3 import client, session
from botocore.exceptions import ClientError, NoRegionError
# Library to set log levels
from logging import basicConfig, getLogger, INFO, WARNING
from rich.console import Console
from rich.logging import RichHandler
from sys import exit
# Library to have command line options
import docopt
from os import environ

# Logging configuration
FORMAT = "%(message)s"
basicConfig(
    format=FORMAT, datefmt="[%X]", handlers=[RichHandler()], level=INFO,
)
_log = getLogger("rich")
console = Console()

# Suppress boto3/botocore logging to avoid message `Found credentials in shared credentials file: ~/.aws/credentials`
getLogger('boto3').setLevel(WARNING)
getLogger('botocore').setLevel(WARNING)

def load_credentials():
  home_dir = environ['HOME']
  git_platforms = ["Github", "Gitlab"]
  print("╭─────────────────────────────────────────────────╮")
  print("│     ↓ ↓     Available Git Platforms     ↓ ↓     │")
  print("╰─────────────────────────────────────────────────╯\n")
  
  for i, platform in enumerate(git_platforms, 1):
    print(f"{i} ➦ {platform}")

  selected_index = input("\nPlease enter the number of the platform you want to use: ")
  
  try:
    selected_index = int(selected_index)

    # Check if the selected index is valid
    if 1 <= selected_index <= len(git_platforms):
      selected_platform = git_platforms[selected_index - 1]
  
      if selected_platform == "Github":
        machine = "github.com"
      else:
        machine = "gitlab.com"
          
    else:
      _log.warning("Invalid selection. Please choose a valid number.")
      exit(0)
      
  except ValueError:
    _log.warning("Invalid input. Please enter a number.")
    exit(0)
  
  username = input(f"\nPlease enter the {selected_platform} username: ")
  email = input(f"\nPlease enter the {selected_platform} e-mail address: ")
  user_provider_ssm_parameter = input("Please enter the SSM parameter name or press enter to ignore and paste access token manually: ")
  
  if user_provider_ssm_parameter:
    try:
      ssm_client = client("ssm")
      response = ssm_client.get_parameter(
      Name=user_provider_ssm_parameter,
      WithDecryption=True
      )['Parameter']
  
    except ClientError as e:
      _log.error(e)
      exit(1)
  
    aws_session = session.Session()
    region_name = aws_session.region_name

    if response:
      git_personal_token = response['Value']
  
    else:
      _log.warning("SSM Git parameters not found in %s region. Please switch to the region where you have SSM Git parameters stored", region_name)
      _log.info("Let's try another method?")
  
  else:
    git_personal_token = input(f"Please provide your {selected_platform} access token and hit `Enter`: ")

  with open(f"{home_dir}/.netrc", "w") as git_credentials:
    git_credentials.write(f"machine {machine}\n")
    git_credentials.write(f"login {username}\n")
    git_credentials.write(f"password {git_personal_token}\n")
    
  with open(f"{home_dir}/.gitconfig", "w") as git_config:
    git_config.write("[user]\n")
    git_config.write(f"        name = {username}\n")
    git_config.write(f"        email = {email}\n")
    git_config.write(f"        username = {username}")
    
  _log.info("%s username has been defined", selected_platform)
  _log.info("%s e-mail has been defined", selected_platform)
  _log.info("%s password has been defined", selected_platform)

# Main function
def main(options):
   if options["--debug"]:
      for key, value in options.items():
         _log.debug("command-line options: {}: {}".format(key, value))

   try:
      load_credentials()
    
   except NoRegionError as e:
      _log.warning(e)
      exit(0)

if __name__ == "__main__":
   try:
      options = docopt.docopt(__doc__)
      main(options)

   except docopt.DocoptExit:
      exit(__doc__)